/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * chatFrame.java
 *
 * Created on May 4, 2010, 7:44:02 PM
 */
package chitchat.Views;

import chitchat.Infrastructure.ChatListener;
import chitchat.Infrastructure.joinSender;

import chitchat.Models.Chatter;
import chitchat.Models.ChattersList;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.InterfaceAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Enumeration;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author Administrator
 */
public class chatFrame extends javax.swing.JFrame {

    /** Creates new form chatFrame */
    public ChattersList chatters;
    int port;
    DatagramSocket theSocket;
    boolean scos= false;
    chatFrame self;



    public chatFrame() {
        initComponents();
        this.self=this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        nameTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 153));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        messageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageTextFieldActionPerformed(evt);
            }
        });
        messageTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                messageTextFieldKeyReleased(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jList1.setBackground(new java.awt.Color(204, 204, 204));
        jScrollPane2.setViewportView(jList1);

        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });

        portTextField.setText("1234");

        jButton1.setText("Enter chat");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Chatter");

        jLabel2.setText("Port");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(14, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                    .addComponent(messageTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(messageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                        .addGap(16, 16, 16))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void messageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_messageTextFieldActionPerformed

    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextFieldActionPerformed

    private void messageTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageTextFieldKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10) {
            try {
                byte[] buffer = new byte[1024];
                String message = "MESSAGE: " + this.messageTextField.getText();
                buffer = message.getBytes();
                DatagramPacket packet = new DatagramPacket(buffer, buffer.length, this.getBroadcastAddress(), this.port);
                this.theSocket.send(packet);
                this.messageTextField.setText("");
            } catch (IOException ex) {
                this.publicaChat("Error sending" + ex.getMessage());
            }
    }//GEN-LAST:event_messageTextFieldKeyReleased
    }
        private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            // TODO add your handling code here:
            System.out.println("Incep");
            try {
                this.port = Integer.parseInt(this.portTextField.getText());
                this.chatters = new ChattersList();                
                this.theSocket = new DatagramSocket();
                this.theSocket.setBroadcast(Boolean.TRUE);                
                this.publicaChat("<< Chat started >> ");
                //this.setEnabled();          
                this.launchtChatListener();
                this.launchJoinSender();
                //this.startTimer();
                this.messageTextField.requestFocusInWindow();
                //oprim modificarea datelor
                this.portTextField.setEditable(false);
                this.nameTextField.setEditable(false);
                this.jButton1.setEnabled(false);
            } catch (Exception ex) {
                this.publicaChat("Error enter chat" + ex.getMessage());

            }
        }//GEN-LAST:event_jButton1ActionPerformed

        private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
            // TODO add your handling code here:
         
        }//GEN-LAST:event_formWindowClosed

        private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
            // TODO add your handling code here:
            if (!this.scos){
            try {
            byte[] buffer = new byte[1024];
            String message = "LEAVE";
            buffer = message.getBytes();
            DatagramPacket packet = new DatagramPacket(buffer, buffer.length, this.getBroadcastAddress(), this.port);
            this.theSocket.send(packet);
        } catch (IOException ex) {
            this.publicaChat("Error sending" + ex.getMessage());
        }
            System.out.println("Inchid fereastra");
        }//GEN-LAST:event_formWindowClosing
        }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new chatFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField messageTextField;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTextField portTextField;
    // End of variables declaration//GEN-END:variables

    private void publicaChat(String string) {
        this.jTextArea1.setText(string + "\n" + this.jTextArea1.getText());
    }
    public JList getJlist(){
        return jList1;
    }
    public void sendMessage(InetAddress el, int port, String mes) {
        Chatter chatter = new Chatter(el, port, "Doe");

        if (!chatters.contains(chatter)) {
            chatters.add(chatter);
        }

        chatter = chatters.update(chatter);
        this.publicaChat(chatter.getName() + ": " + mes);      
        this.updateOnlineList();
    }

    public void addChatter(InetAddress el, int port, String name) {
        Chatter chatter = new Chatter(el, port, name);
        if (chatters.contains(chatter)) {
            chatters.update(chatter);
        } else {
            chatters.add(chatter);
            this.publicaChat("Chatter nou >> " + name +" "+ el.toString() + ":" + port);
        }
        this.updateOnlineList();
    }

    public void removeChatter(InetAddress el, int port) {
        Chatter removed = chatters.remove(new Chatter(el, port, null));
        this.publicaChat("Chatter pleaca >> " + removed.getName() + el.toString() + ":" + port);
        this.updateOnlineList();
    }

    private void launchtChatListener() {
        try {
            new Thread(new ChatListener(this, this.port)).start();
        } catch (Exception ex) {
            this.publicaChat("Error launch chatlistener" + ex.getMessage());
        }
    }
  

    private void launchJoinSender() {
        String data = "JOIN: " + nameTextField.getText();
        byte[] buffer = data.getBytes();
        DatagramPacket packet = new DatagramPacket(buffer, buffer.length, this.getBroadcastAddress(), this.port);
        new joinSender(this.theSocket, packet).start(); // threadul cu join la cateva secunde
    }


    
/*
    private void sendLeaveMessage() {       
        
        try {
            byte[] buffer = new byte[1024];
            String message = "LEAVE";
            buffer = message.getBytes();
            DatagramPacket packet = new DatagramPacket(buffer, buffer.length, this.getBroadcastAddress(), this.port);
            this.theSocket.send(packet);
        } catch (IOException ex) {
            this.publicaChat("Error sending" + ex.getMessage());
        }
    }*/

    private InetAddress getBroadcastAddress() {
        try {
            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
            while (interfaces.hasMoreElements()) {
                NetworkInterface networkInterface = interfaces.nextElement();
                if (networkInterface.isLoopback()) {
                    continue; // Don't want to broadcast to the loopback interface
                }
                for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {
                    InetAddress broadcast = interfaceAddress.getBroadcast();
                    if (broadcast == null) {
                        continue;
                    }
                    return broadcast;
                }
            }
        } catch (SocketException ex) {
            this.publicaChat("Error getting bcast adress" + ex.getMessage());
        }
        return null;
    }

    private void updateOnlineList() {
        DefaultListModel model = new DefaultListModel();
       /* for(Chatter c : chatters.get()){
            if (c.isIdle()){
                chatters.remove(c);
                System.out.println("Am scos pe " + c.getName());
            }
            else
                model.addElement(c);
        }*/

        for (int i=0;i<chatters.size();i++){
            if (chatters.get().get(i).isIdle())
                this.publicaChat( chatters.get().get(i).getName() +" este idle");
                 //chatters.remove(chatters.get().get(i));
                 //this.scos=true;
            model.addElement(chatters.get().get(i));
         }
        jList1.setModel(model);    

    
    }
}